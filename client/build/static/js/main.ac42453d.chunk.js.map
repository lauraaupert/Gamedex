{"version":3,"sources":["components/Wishlist/WishList.js","components/Wishlist/Navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","media","height","paddingcenter","RecipeReviewCard","classes","Card","className","CardHeader","action","IconButton","aria-label","title","subheader","flexGrow","menuButton","marginRight","spacing","NavBar","React","useState","auth","setAuth","anchorEl","setAnchorEl","open","Boolean","handleClose","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","target","label","AppBar","position","Toolbar","edge","color","Typography","variant","onClick","aria-controls","aria-haspopup","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","App","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ac42453d.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingcenter: \"100%\", // 16:9\n  },\n}));\n\nexport default function RecipeReviewCard() {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        }\n        title=\"WistList\"\n        subheader=\"Choose your game\"\n      />\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(0),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleChange = (event) => {\n    setAuth(event.target.checked);\n  };\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={auth}\n              onChange={handleChange}\n              aria-label=\"login switch\"\n            />\n          }\n          label={auth ? \"Logout\" : \"Login\"}\n        />\n      </FormGroup>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            // onClick={link}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Gamedex\n          </Typography>\n          <Typography onClick variant=\"h6\" className={classes.title}>\n            Steam\n          </Typography>\n          <Typography variant=\"h6\" className={classes.title}>\n            Epic\n          </Typography>\n          {auth && (\n            <div>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                <MenuItem onClick={handleClose}>My Wishlist</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Wishlist from \"./components/Wishlist/WishList\";\nimport Navbar from \"./components/Wishlist/Navbar\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Wishlist />\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}